const axios = require('axios');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// ÈÖçÁΩÆ
const API_BASE_URL = 'http://localhost:3000';
const PROJECTS_DIR = path.join(__dirname, 'generated-projects');

// Á°Æ‰øùÈ°πÁõÆÁõÆÂΩïÂ≠òÂú®
if (!fs.existsSync(PROJECTS_DIR)) {
    fs.mkdirSync(PROJECTS_DIR, { recursive: true });
}

/**
 * ÂàõÂª∫ÂÆûÈôÖÁöÑVueÈ°πÁõÆÊñá‰ª∂
 */
async function createVueProject() {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    
    console.log('üöÄ AutoWeb È°πÁõÆÁîüÊàêÂô®');
    console.log('‚ïê'.repeat(60));
    console.log(`‚è∞ ÂºÄÂßãÊó∂Èó¥: ${new Date().toLocaleString('zh-CN')}`);
    console.log('');
    
    try {
        // Ê£ÄÊü•ÊúçÂä°Âô®ËøûÊé•
        console.log('üîç Ê£ÄÊü•ÊúçÂä°Âô®ËøûÊé•...');
        const healthCheck = await axios.get(`${API_BASE_URL}/health`);
        console.log('‚úÖ ÊúçÂä°Âô®ËøûÊé•Ê≠£Â∏∏');
        console.log(`üîë APIÂØÜÈí•: ${healthCheck.data.environment.apiKeyConfigured ? 'Â∑≤ÈÖçÁΩÆ' : 'Êú™ÈÖçÁΩÆ'}`);
        console.log('');
        
        // È°πÁõÆÊèèËø∞
        const projectDescription = `ÂàõÂª∫‰∏Ä‰∏™Áé∞‰ª£ÂåñÁöÑÊô∫ËÉΩÊâãË°®ÁîµÂïÜÁΩëÁ´ôÔºåÂåÖÂê´‰ª•‰∏ãÂäüËÉΩÔºö

„ÄêÊ†∏ÂøÉÈ°µÈù¢„Äë
1. È¶ñÈ°µ - ‰∫ßÂìÅËΩÆÊí≠„ÄÅÁÉ≠Èó®Êé®Ëçê„ÄÅÂìÅÁâåÊïÖ‰∫ã
2. ‰∫ßÂìÅÂàóË°®È°µ - Á≠õÈÄâ„ÄÅÊéíÂ∫è„ÄÅÂàÜÈ°µ
3. ‰∫ßÂìÅËØ¶ÊÉÖÈ°µ - ÂõæÁâáÁîªÂªä„ÄÅËßÑÊ†ºÈÄâÊã©„ÄÅËØÑ‰ª∑Â±ïÁ§∫
4. Ë¥≠Áâ©ËΩ¶È°µÈù¢ - ÂïÜÂìÅÁÆ°ÁêÜ„ÄÅÁªìÁÆóÊµÅÁ®ã
5. Áî®Êà∑‰∏≠ÂøÉ - ‰∏™‰∫∫‰ø°ÊÅØ„ÄÅËÆ¢ÂçïÁÆ°ÁêÜ

„ÄêÊäÄÊúØÊ†à„Äë
- Vue 3 + Composition API
- TypeScript
- Vue Router 4
- Pinia Áä∂ÊÄÅÁÆ°ÁêÜ
- Element Plus UIÁªÑ‰ª∂
- Vite ÊûÑÂª∫Â∑•ÂÖ∑

„ÄêËÆæËÆ°È£éÊ†º„Äë
- Ê∑±Ëâ≤‰∏ªÈ¢ò‰∏∫‰∏ª
- Áé∞‰ª£ÁÆÄÁ∫¶ËÆæËÆ°
- ÊµÅÁïÖÂä®ÁîªÊïàÊûú
- ÂÆåÂÖ®ÂìçÂ∫îÂºèÂ∏ÉÂ±Ä

„ÄêÁªÑ‰ª∂ÁªìÊûÑ„Äë
- Â∏ÉÂ±ÄÁªÑ‰ª∂ÔºöHeader„ÄÅFooter„ÄÅSidebar
- ÂÖ¨ÂÖ±ÁªÑ‰ª∂ÔºöProductCard„ÄÅLoading„ÄÅModal
- È°µÈù¢ÁªÑ‰ª∂ÔºöÂØπÂ∫îÂêÑ‰∏™È°µÈù¢
- ‰∏öÂä°ÁªÑ‰ª∂ÔºöË¥≠Áâ©ËΩ¶„ÄÅÁî®Êà∑ÁôªÂΩïÁ≠â

ËØ∑ÂàõÂª∫ÂÆåÊï¥ÁöÑÈ°πÁõÆÁªìÊûÑÔºåÂåÖÂê´ÊâÄÊúâÂøÖË¶ÅÁöÑÊñá‰ª∂„ÄÅÁªÑ‰ª∂ÂíåÈÖçÁΩÆ„ÄÇ`;

        console.log('üìù È°πÁõÆÈúÄÊ±Ç:');
        console.log(projectDescription);
        console.log('');
        console.log('üéØ ÂºÄÂßãÁîüÊàêÈ°πÁõÆ...');
        
        const startTime = Date.now();
        
        // Ë∞ÉÁî®AIÁîüÊàêAPI
        const response = await axios.post(`${API_BASE_URL}/api/generate`, {
            description: projectDescription,
            options: {
                enableThinking: true,
                useStructuredOutput: true,
                includeValidation: true
            }
        });
        
        const endTime = Date.now();
        const duration = endTime - startTime;
        
        if (!response.data.success) {
            console.log('‚ùå È°πÁõÆÁîüÊàêÂ§±Ë¥•:', response.data.error);
            return;
        }
        
        const { data: projectData, metadata } = response.data;
        
        console.log('‚úÖ È°πÁõÆÁîüÊàêÊàêÂäü!');
        console.log(`‚è±Ô∏è  ËÄóÊó∂: ${duration}ms`);
        console.log(`üì¶ È°πÁõÆÂêçÁß∞: ${projectData.projectName}`);
        console.log(`üìÅ Êñá‰ª∂Êï∞Èáè: ${projectData.files.length}`);
        console.log(`üì¶ ‰æùËµñÊï∞Èáè: ${projectData.dependencies.length}`);
        console.log('');
        
        // ÂàõÂª∫È°πÁõÆÁõÆÂΩï
        const projectName = projectData.projectName.replace(/[^a-zA-Z0-9-_]/g, '-').toLowerCase();
        const projectDir = path.join(PROJECTS_DIR, `${projectName}-${timestamp}`);
        
        console.log(`üìÅ ÂàõÂª∫È°πÁõÆÁõÆÂΩï: ${projectDir}`);
        fs.mkdirSync(projectDir, { recursive: true });
        
        // ÂàõÂª∫package.jsonÊñá‰ª∂
        console.log('üì¶ ÂàõÂª∫ package.json...');
        const packageJson = {
            name: projectName,
            version: '1.0.0',
            type: 'module',
            description: projectData.description,
            scripts: {
                dev: 'vite',
                build: 'vue-tsc && vite build',
                preview: 'vite preview',
                'type-check': 'vue-tsc --noEmit'
            },
            dependencies: {},
            devDependencies: {
                '@vitejs/plugin-vue': '^5.0.0',
                'typescript': '^5.0.0',
                'vue-tsc': '^2.0.0',
                'vite': '^5.0.0'
            }
        };
        
        // Ê∑ªÂä†È°πÁõÆ‰æùËµñ
        projectData.dependencies.forEach(dep => {
            if (dep.includes('vue')) {
                packageJson.dependencies[dep] = '^3.0.0';
            } else if (dep.includes('router')) {
                packageJson.dependencies['vue-router'] = '^4.0.0';
            } else if (dep.includes('pinia')) {
                packageJson.dependencies['pinia'] = '^2.0.0';
            } else if (dep.includes('element')) {
                packageJson.dependencies['element-plus'] = '^2.0.0';
            } else {
                packageJson.dependencies[dep] = 'latest';
            }
        });
        
        fs.writeFileSync(
            path.join(projectDir, 'package.json'),
            JSON.stringify(packageJson, null, 2),
            'utf8'
        );
        
        // ÂàõÂª∫vite.config.ts
        console.log('‚öôÔ∏è  ÂàõÂª∫ vite.config.ts...');
        const viteConfig = `import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import { resolve } from 'path'

export default defineConfig({
  plugins: [vue()],
  resolve: {
    alias: {
      '@': resolve(__dirname, 'src')
    }
  },
  server: {
    port: 3000,
    host: true
  }
})`;
        
        fs.writeFileSync(path.join(projectDir, 'vite.config.ts'), viteConfig, 'utf8');
        
        // ÂàõÂª∫tsconfig.json
        console.log('üìù ÂàõÂª∫ tsconfig.json...');
        const tsConfig = {
            compilerOptions: {
                target: 'ES2020',
                useDefineForClassFields: true,
                module: 'ESNext',
                lib: ['ES2020', 'DOM', 'DOM.Iterable'],
                skipLibCheck: true,
                moduleResolution: 'bundler',
                allowImportingTsExtensions: true,
                resolveJsonModule: true,
                isolatedModules: true,
                noEmit: true,
                jsx: 'preserve',
                strict: true,
                noUnusedLocals: true,
                noUnusedParameters: true,
                noFallthroughCasesInSwitch: true,
                baseUrl: '.',
                paths: {
                    '@/*': ['src/*']
                }
            },
            include: ['src/**/*.ts', 'src/**/*.tsx', 'src/**/*.vue'],
            references: [{ path: './tsconfig.node.json' }]
        };
        
        fs.writeFileSync(
            path.join(projectDir, 'tsconfig.json'),
            JSON.stringify(tsConfig, null, 2),
            'utf8'
        );
        
        // ÂàõÂª∫index.html
        console.log('üåê ÂàõÂª∫ index.html...');
        const indexHtml = `<!DOCTYPE html>
<html lang="zh-CN">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>${projectData.projectName}</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.ts"></script>
  </body>
</html>`;
        
        fs.writeFileSync(path.join(projectDir, 'index.html'), indexHtml, 'utf8');
        
        // ÂàõÂª∫README.md
        console.log('üìñ ÂàõÂª∫ README.md...');
        const readme = `# ${projectData.projectName}

${projectData.description}

## üöÄ ÂäüËÉΩÁâπÊÄß

${projectData.features.map(feature => `- ${feature}`).join('\n')}

## üõ†Ô∏è ÊäÄÊúØÊ†à

${projectData.dependencies.map(dep => `- ${dep}`).join('\n')}

## üì¶ ÂÆâË£Ö‰æùËµñ

\`\`\`bash
npm install
\`\`\`

## üèÉ‚Äç‚ôÇÔ∏è ËøêË°åÈ°πÁõÆ

\`\`\`bash
# ÂºÄÂèëÊ®°Âºè
npm run dev

# ÊûÑÂª∫Áîü‰∫ßÁâàÊú¨
npm run build

# È¢ÑËßàÁîü‰∫ßÁâàÊú¨
npm run preview
\`\`\`

## üìÅ È°πÁõÆÁªìÊûÑ

\`\`\`
${projectData.files.map(file => file.path).sort().join('\n')}
\`\`\`

## üìù ÁîüÊàê‰ø°ÊÅØ

- ÁîüÊàêÊó∂Èó¥: ${new Date().toLocaleString('zh-CN')}
- ÁîüÊàêËÄóÊó∂: ${duration}ms
- Êñá‰ª∂Êï∞Èáè: ${projectData.files.length}
- AIÊ®°Âûã: Ë±ÜÂåÖÊ∑±Â∫¶ÊÄùËÄÉÊ®°Âûã

---

*Ê≠§È°πÁõÆÁî± AutoWeb AI Ëá™Âä®ÁîüÊàê*
`;
        
        fs.writeFileSync(path.join(projectDir, 'README.md'), readme, 'utf8');
        
        // ÂàõÂª∫ÊâÄÊúâÈ°πÁõÆÊñá‰ª∂
        console.log('');
        console.log('üìÅ ÂºÄÂßãÂàõÂª∫È°πÁõÆÊñá‰ª∂...');
        console.log('‚îÄ'.repeat(50));
        
        let createdFiles = 0;
        const filesByType = {};
        
        for (const file of projectData.files) {
            createdFiles++;
            
            // ÁªüËÆ°Êñá‰ª∂Á±ªÂûã
            if (!filesByType[file.type]) {
                filesByType[file.type] = 0;
            }
            filesByType[file.type]++;
            
            const filePath = path.join(projectDir, file.path);
            const fileDir = path.dirname(filePath);
            
            // Á°Æ‰øùÁõÆÂΩïÂ≠òÂú®
            if (!fs.existsSync(fileDir)) {
                fs.mkdirSync(fileDir, { recursive: true });
            }
            
            // ÂÜôÂÖ•Êñá‰ª∂ÂÜÖÂÆπ
            fs.writeFileSync(filePath, file.content, 'utf8');
            
            // ÂÆûÊó∂ÊòæÁ§∫ËøõÂ∫¶
            const progress = ((createdFiles / projectData.files.length) * 100).toFixed(1);
            console.log(`[${progress}%] ‚úÖ ${file.path} (${file.type})`);
            
            // Áü≠ÊöÇÂª∂ËøüÔºåÊ®°ÊãüÂàõÂª∫ËøáÁ®ã
            await new Promise(resolve => setTimeout(resolve, 50));
        }
        
        console.log('‚îÄ'.repeat(50));
        console.log('');
        
        // ÂàõÂª∫È°πÁõÆ‰ø°ÊÅØÊñá‰ª∂
        const projectInfo = {
            name: projectData.projectName,
            description: projectData.description,
            generatedAt: new Date().toISOString(),
            generationTime: duration,
            fileCount: projectData.files.length,
            dependencyCount: projectData.dependencies.length,
            featureCount: projectData.features.length,
            files: projectData.files.map(f => ({
                path: f.path,
                type: f.type,
                size: f.content.length
            })),
            dependencies: projectData.dependencies,
            features: projectData.features,
            validation: metadata.validation,
            filesByType: filesByType
        };
        
        fs.writeFileSync(
            path.join(projectDir, 'project-info.json'),
            JSON.stringify(projectInfo, null, 2),
            'utf8'
        );
        
        // ÊòæÁ§∫ÂÆåÊàê‰ø°ÊÅØ
        console.log('üéâ È°πÁõÆÂàõÂª∫ÂÆåÊàê!');
        console.log('‚ïê'.repeat(60));
        console.log(`üìÅ È°πÁõÆ‰ΩçÁΩÆ: ${projectDir}`);
        console.log(`üìä ÂàõÂª∫ÁªüËÆ°:`);
        console.log(`   - ÊÄªÊñá‰ª∂Êï∞: ${createdFiles}`);
        console.log(`   - ÊÄªËÄóÊó∂: ${duration}ms`);
        
        console.log(`üìã Êñá‰ª∂Á±ªÂûãÂàÜÂ∏É:`);
        Object.entries(filesByType).forEach(([type, count]) => {
            console.log(`   - ${type}: ${count} ‰∏™Êñá‰ª∂`);
        });
        
        if (metadata.validation) {
            console.log(`‚úÖ È™åËØÅÁªìÊûú: ${metadata.validation.valid ? 'ÈÄöËøá' : 'Â§±Ë¥•'}`);
            if (metadata.validation.errors.length > 0) {
                console.log(`‚ö†Ô∏è  ÈîôËØØ: ${metadata.validation.errors.length} ‰∏™`);
            }
            if (metadata.validation.warnings.length > 0) {
                console.log(`üí° Ë≠¶Âëä: ${metadata.validation.warnings.length} ‰∏™`);
            }
        }
        
        console.log('');
        console.log('üöÄ Âø´ÈÄüÂºÄÂßã:');
        console.log(`   cd "${projectDir}"`);
        console.log('   npm install');
        console.log('   npm run dev');
        console.log('');
        
        // ÂàõÂª∫ÂêØÂä®ËÑöÊú¨
        const startScript = `@echo off
cd /d "${projectDir}"
echo Ê≠£Âú®ÂÆâË£Ö‰æùËµñ...
npm install
echo.
echo ÂêØÂä®ÂºÄÂèëÊúçÂä°Âô®...
npm run dev
pause`;
        
        fs.writeFileSync(path.join(projectDir, 'start.bat'), startScript, 'utf8');
        console.log('üìù Â∑≤ÂàõÂª∫ start.bat ÂêØÂä®ËÑöÊú¨ (ÂèåÂáªÂç≥ÂèØËøêË°å)');
        
        return projectDir;
        
    } catch (error) {
        console.log('‚ùå ÂàõÂª∫È°πÁõÆÂ§±Ë¥•:', error.message);
        if (error.response) {
            console.log(`   Áä∂ÊÄÅÁ†Å: ${error.response.status}`);
            console.log(`   ËØ¶ÊÉÖ: ${JSON.stringify(error.response.data, null, 2)}`);
        }
        return null;
    }
}

// ‰∏ªÁ®ãÂ∫è
async function main() {
    console.log('üßô‚Äç‚ôÇÔ∏è AutoWeb VueÈ°πÁõÆÁîüÊàêÂô®');
    console.log('');
    
    const projectDir = await createVueProject();
    
    if (projectDir) {
        console.log('');
        console.log('üéä ÊÅ≠ÂñúÔºÅÊÇ®ÁöÑVueÈ°πÁõÆÂ∑≤ÊàêÂäüÂàõÂª∫ÔºÅ');
        console.log('üí° Êé•‰∏ãÊù•ÊÇ®ÂèØ‰ª•:');
        console.log('   1. ‰ΩøÁî®VS CodeÊâìÂºÄÈ°πÁõÆÁõÆÂΩï');
        console.log('   2. ËøêË°å npm install ÂÆâË£Ö‰æùËµñ');
        console.log('   3. ËøêË°å npm run dev ÂêØÂä®ÂºÄÂèëÊúçÂä°Âô®');
        console.log('   4. Âú®ÊµèËßàÂô®‰∏≠Êü•ÁúãÊÇ®ÁöÑÁΩëÁ´ô');
    } else {
        console.log('');
        console.log('üòû È°πÁõÆÂàõÂª∫Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•:');
        console.log('   - ÊúçÂä°Âô®ÊòØÂê¶Ê≠£Âú®ËøêË°å');
        console.log('   - APIÂØÜÈí•ÊòØÂê¶Ê≠£Á°ÆÈÖçÁΩÆ');
        console.log('   - ÁΩëÁªúËøûÊé•ÊòØÂê¶Ê≠£Â∏∏');
    }
}

// ËøêË°å‰∏ªÁ®ãÂ∫è
main().catch(error => {
    console.error('‚ùå Á®ãÂ∫èÊâßË°åÂ§±Ë¥•:', error.message);
    process.exit(1);
});